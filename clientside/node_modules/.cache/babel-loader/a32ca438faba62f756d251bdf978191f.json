{"ast":null,"code":"const initialState = {\n  products: []\n};\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'GET_PRODUCTS':\n      return { ...state,\n        products: action.payload\n      };\n\n    case 'DISPATCH_PRODUCTS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n}; // export async function dispatchProducts(dispatch, getState){\n//   let info = await axios(urlapi)\n//   return {type: \"GET_PRODUCTS\", payload:info.data}\n//   await fetch(\"http://localhost:3002/products\", {\n//       method: 'GET',\n//     })\n//     .then( res => res.json())\n//     .then(data => {dispatch ({type: 'DISPATCH_PRODUCTS', payload:data})})\n// }","map":{"version":3,"sources":["C:/Users/Justo/Desktop/itcrowd-challenge/clientside/src/reducer/reducer.js"],"names":["initialState","products","reducer","state","action","type","payload"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAC;AADQ,CAArB;AAKA,OAAO,MAAMC,OAAO,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELF,QAAAA,QAAQ,EAACG,MAAM,CAACE;AAFX,OAAP;;AAIF,SAAK,mBAAL;AACE,aAAOF,MAAM,CAACE,OAAd;;AACF;AACI,aAAOH,KAAP;AATR;AAWL,CAZM,C,CAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA","sourcesContent":["const initialState = {\r\n    products:[],\r\n\r\n}\r\n    \r\nexport const reducer = (state = initialState, action) => {\r\n      switch (action.type) {\r\n          case 'GET_PRODUCTS':\r\n            return {\r\n              ...state, \r\n              products:action.payload,     \r\n            }\r\n          case 'DISPATCH_PRODUCTS':\r\n            return action.payload\r\n          default:\r\n              return state;\r\n        }\r\n}\r\n\r\n// export async function dispatchProducts(dispatch, getState){\r\n//   let info = await axios(urlapi)\r\n//   return {type: \"GET_PRODUCTS\", payload:info.data}\r\n//   await fetch(\"http://localhost:3002/products\", {\r\n//       method: 'GET',\r\n//     })\r\n//     .then( res => res.json())\r\n//     .then(data => {dispatch ({type: 'DISPATCH_PRODUCTS', payload:data})})\r\n\r\n  \r\n// }"]},"metadata":{},"sourceType":"module"}